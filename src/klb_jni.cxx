/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdint.h>		// Use the C99 official header


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


// Includes header and wrapper code
#include "common.h"
#include "klb_imageHeader.h"
#include "klb_ROI.h"
#include "klb_imageIO.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KLB_1DATA_1DIMS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((5));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KLB_1DEFAULT_1HEADER_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_UINT8_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)UINT8_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_UINT16_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)UINT16_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_UINT32_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)UINT32_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_UINT64_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)UINT64_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_INT8_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)INT8_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_INT16_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)INT16_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_INT32_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)INT32_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_INT64_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)INT64_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_FLOAT32_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)FLOAT32_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_FLOAT64_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_DATA_TYPE)FLOAT64_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_COMPRESSION_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_COMPRESSION_TYPE)NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_BZIP2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_COMPRESSION_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_COMPRESSION_TYPE)BZIP2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_ZLIB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  KLB_COMPRESSION_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (KLB_COMPRESSION_TYPE)ZLIB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1headerVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  if (arg1) (arg1)->headerVersion = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1headerVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint8_t) ((arg1)->headerVersion);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1xyzct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    std::uint32_t *b = (std::uint32_t *) arg1->xyzct;
    for (ii = 0; ii < (size_t)(5); ii++) b[ii] = *((std::uint32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1xyzct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint32_t *)(std::uint32_t *) ((arg1)->xyzct);
  jresult = SWIG_JavaArrayOutUint(jenv, (unsigned int *)result, (5)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1pixelSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  float32_t *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float32_t *b = (float32_t *) arg1->pixelSize;
    for (ii = 0; ii < (size_t)(5); ii++) b[ii] = *((float32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1pixelSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  float32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (float32_t *)(float32_t *) ((arg1)->pixelSize);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, (5)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1dataType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  KLB_DATA_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  arg2 = (KLB_DATA_TYPE)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1dataType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  KLB_DATA_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (KLB_DATA_TYPE) ((arg1)->dataType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1compressionType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  KLB_COMPRESSION_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  arg2 = (KLB_COMPRESSION_TYPE)jarg2; 
  if (arg1) (arg1)->compressionType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1compressionType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  KLB_COMPRESSION_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (KLB_COMPRESSION_TYPE) ((arg1)->compressionType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1blockSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    std::uint32_t *b = (std::uint32_t *) arg1->blockSize;
    for (ii = 0; ii < (size_t)(5); ii++) b[ii] = *((std::uint32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1blockSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint32_t *)(std::uint32_t *) ((arg1)->blockSize);
  jresult = SWIG_JavaArrayOutUint(jenv, (unsigned int *)result, (5)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_new_1KlbImageHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_image_header *arg1 = 0 ;
  klb_image_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "klb_image_header const & reference is null");
    return 0;
  } 
  result = (klb_image_header *)new klb_image_header((klb_image_header const &)*arg1);
  *(klb_image_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_delete_1KlbImageHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(klb_image_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_new_1KlbImageHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  klb_image_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (klb_image_header *)new klb_image_header();
  *(klb_image_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1readHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->readHeader((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getNumBlocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = ((klb_image_header const *)arg1)->getNumBlocks();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getMetadataSizeInBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (int)((klb_image_header const *)arg1)->getMetadataSizeInBytes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1calculateNumBlocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = ((klb_image_header const *)arg1)->calculateNumBlocks();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getBytesPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = ((klb_image_header const *)arg1)->getBytesPerPixel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getBlockSizeBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint32_t)((klb_image_header const *)arg1)->getBlockSizeBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getImageSizeBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint64_t)((klb_image_header const *)arg1)->getImageSizeBytes();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1getImageSizePixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  result = (std::uint64_t)((klb_image_header const *)arg1)->getImageSizePixels();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3, jfloatArray jarg4, jlongArray jarg5, jint jarg6, jstring jarg7, jshort jarg8) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  float32_t *arg4 ;
  std::uint32_t *arg5 ;
  KLB_COMPRESSION_TYPE arg6 ;
  char *arg7 ;
  std::uint8_t arg8 ;
  jlong *jarr2 ;
  jfloat *jarr4 ;
  jlong *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr5, (unsigned int **)&arg5, jarg5)) return ; 
  arg6 = (KLB_COMPRESSION_TYPE)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (std::uint8_t)jarg8; 
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3,(float32_t const (*))arg4,(std::uint32_t const (*))arg5,arg6,(char const (*))arg7,arg8);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutUint(jenv, jarr5, (unsigned int *)arg5, jarg5); 
  
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3, jfloatArray jarg4, jlongArray jarg5, jint jarg6, jstring jarg7) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  float32_t *arg4 ;
  std::uint32_t *arg5 ;
  KLB_COMPRESSION_TYPE arg6 ;
  char *arg7 ;
  jlong *jarr2 ;
  jfloat *jarr4 ;
  jlong *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr5, (unsigned int **)&arg5, jarg5)) return ; 
  arg6 = (KLB_COMPRESSION_TYPE)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3,(float32_t const (*))arg4,(std::uint32_t const (*))arg5,arg6,(char const (*))arg7);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutUint(jenv, jarr5, (unsigned int *)arg5, jarg5); 
  
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3, jfloatArray jarg4, jlongArray jarg5, jint jarg6) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  float32_t *arg4 ;
  std::uint32_t *arg5 ;
  KLB_COMPRESSION_TYPE arg6 ;
  jlong *jarr2 ;
  jfloat *jarr4 ;
  jlong *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr5, (unsigned int **)&arg5, jarg5)) return ; 
  arg6 = (KLB_COMPRESSION_TYPE)jarg6; 
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3,(float32_t const (*))arg4,(std::uint32_t const (*))arg5,arg6);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutUint(jenv, jarr5, (unsigned int *)arg5, jarg5); 
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3, jfloatArray jarg4, jlongArray jarg5) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  float32_t *arg4 ;
  std::uint32_t *arg5 ;
  jlong *jarr2 ;
  jfloat *jarr4 ;
  jlong *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr5, (unsigned int **)&arg5, jarg5)) return ; 
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3,(float32_t const (*))arg4,(std::uint32_t const (*))arg5);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutUint(jenv, jarr5, (unsigned int *)arg5, jarg5); 
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3, jfloatArray jarg4) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  float32_t *arg4 ;
  jlong *jarr2 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3,(float32_t const (*))arg4);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageHeader_1setHeader_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3) {
  klb_image_header *arg1 = (klb_image_header *) 0 ;
  std::uint32_t *arg2 ;
  KLB_DATA_TYPE arg3 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_image_header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (KLB_DATA_TYPE)jarg3; 
  (arg1)->setHeader((std::uint32_t const (*))arg2,arg3);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1xyzctLB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    std::uint32_t *b = (std::uint32_t *) arg1->xyzctLB;
    for (ii = 0; ii < (size_t)(5); ii++) b[ii] = *((std::uint32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1xyzctLB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  result = (std::uint32_t *)(std::uint32_t *) ((arg1)->xyzctLB);
  jresult = SWIG_JavaArrayOutUint(jenv, (unsigned int *)result, (5)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1xyzctUB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    std::uint32_t *b = (std::uint32_t *) arg1->xyzctUB;
    for (ii = 0; ii < (size_t)(5); ii++) b[ii] = *((std::uint32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1xyzctUB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  result = (std::uint32_t *)(std::uint32_t *) ((arg1)->xyzctUB);
  jresult = SWIG_JavaArrayOutUint(jenv, (unsigned int *)result, (5)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1defineSlice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlongArray jarg4) {
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  int arg2 ;
  int arg3 ;
  std::uint32_t *arg4 ;
  jlong *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr4, (unsigned int **)&arg4, jarg4)) return ; 
  (arg1)->defineSlice(arg2,arg3,(std::uint32_t const (*))arg4);
  SWIG_JavaArrayArgoutUint(jenv, jarr4, (unsigned int *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1defineFullImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != (5)) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  (arg1)->defineFullImage((std::uint32_t const (*))arg2);
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1getSizePixels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  int arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::uint32_t)(arg1)->getSizePixels(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbRoi_1getSizePixels_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_ROI **)&jarg1; 
  result = (std::uint64_t)((klb_ROI const *)arg1)->getSizePixels();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_new_1KlbRoi(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  klb_ROI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (klb_ROI *)new klb_ROI();
  *(klb_ROI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_delete_1KlbRoi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  klb_ROI *arg1 = (klb_ROI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(klb_ROI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  klb_image_header *arg2 = (klb_image_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(klb_imageIO **)&jarg1; 
  arg2 = *(klb_image_header **)&jarg2; 
  if (arg1) (arg1)->header = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  klb_image_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  result = (klb_image_header *)& ((arg1)->header);
  *(klb_image_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1numThreads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numThreads = arg2;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1numThreads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  result = (int) ((arg1)->numThreads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_new_1KlbImageIO_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  klb_imageIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (klb_imageIO *)new klb_imageIO();
  *(klb_imageIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_new_1KlbImageIO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  klb_imageIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (klb_imageIO *)new klb_imageIO((std::string const &)*arg1);
  *(klb_imageIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1getFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  result = ((klb_imageIO const *)arg1)->getFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1setFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFilename((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1readHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  result = (int)(arg1)->readHeader();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1readHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->readHeader((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1writeImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->writeImage((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1readImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  char *arg2 = (char *) 0 ;
  klb_ROI *arg3 = (klb_ROI *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(klb_imageIO **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = *(klb_ROI **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->readImage(arg2,(klb_ROI const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_KlbImageIO_1readImageFull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  jint jresult = 0 ;
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(klb_imageIO **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->readImageFull(arg2,arg3);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_janelia_simview_klb_jni_KlbJNI_delete_1KlbImageIO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  klb_imageIO *arg1 = (klb_imageIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(klb_imageIO **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

